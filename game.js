// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä—ã
let GAME_WIDTH = 800;
let GAME_HEIGHT = 600;

// –ò–≥—Ä–∞ "–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫"
class Game {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.setupCanvas();
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.gameState = 'welcome'; // welcome, playing, gameOver, victory
        this.currentLevel = 1;
        this.maxLevel = 4;
        this.score = 0;
        this.health = 3;
        this.lastUIUpdate = { health: 3, score: 0, level: 1 }; // –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ UI
        
        // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        this.player = new Player(100, 300);
        this.boss = null;
        this.platforms = [];
        this.projectiles = [];
        this.particles = [];
        this.collectibles = [];
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.keys = {};
        this.mobileControls = {
            left: false,
            right: false,
            jump: false,
            attack: false
        };
        
        // –ë–æ—Å—Å-–æ–ø–∏—Å–∞–Ω–∏—è
        this.bossData = {
            1: { name: '–í–ª–∞–¥', emoji: 'üö¨', quote: '–õ–∞–¥–Ω–æ, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–ª—é—à–∫–∏!', weapon: 'üí®' },
            2: { name: '–ú–∞–∫—Å', emoji: 'üç∫', quote: '–û–∫–µ–π, –Ω–æ —Å –ø–∏–≤–æ–º –∑–∞–µ–¥—É', weapon: 'üçª' },
            3: { name: '–ú–∞—Ä–∫', emoji: 'üíª', quote: '–ù—É –ª–∞–¥–Ω–æ, –æ—Ç–≤–ª–µ–∫—É—Å—å –æ—Ç —Ä–∞–±–æ—Ç—ã', weapon: 'üìã' },
            4: { name: '–î–µ–Ω', emoji: 'ü™ñ', quote: '–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∏—Ä –æ—Ç–ø—É—Å—Ç–∏—Ç ‚Äî –ø—Ä–∏–¥—É!', weapon: 'üéñÔ∏è' }
        };
        
        this.init();
    }
    
    setupCanvas() {
        const resizeCanvas = () => {
            const container = document.getElementById('gameContainer');
            const rect = container.getBoundingClientRect();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞ —Ä–∞–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            this.canvas.width = rect.width;
            this.canvas.height = rect.height;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–≥—Ä—ã
            GAME_WIDTH = this.canvas.width;
            GAME_HEIGHT = this.canvas.height;
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
            this.updatePlatformSizes();
        };
        
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        window.addEventListener('orientationchange', () => {
            setTimeout(resizeCanvas, 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        });
    }
    
    init() {
        this.setupEventListeners();
        this.gameLoop();
    }
    
    setupEventListeners() {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        document.addEventListener('keydown', (e) => {
            this.keys[e.key] = true;
            if (e.key === ' ') e.preventDefault();
        });
        
        document.addEventListener('keyup', (e) => {
            this.keys[e.key] = false;
        });
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        const setupMobileControl = (id, action) => {
            const btn = document.getElementById(id);
            
            btn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                this.mobileControls[action] = true;
                btn.classList.add('pressed');
                
                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è iOS
                if (navigator.vibrate) {
                    navigator.vibrate(50);
                }
            });
            
            btn.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.mobileControls[action] = false;
                btn.classList.remove('pressed');
            });
            
            btn.addEventListener('touchcancel', (e) => {
                e.preventDefault();
                this.mobileControls[action] = false;
                btn.classList.remove('pressed');
            });
            
            btn.addEventListener('mousedown', (e) => {
                e.preventDefault();
                this.mobileControls[action] = true;
                btn.classList.add('pressed');
            });
            
            btn.addEventListener('mouseup', (e) => {
                e.preventDefault();
                this.mobileControls[action] = false;
                btn.classList.remove('pressed');
            });
            
            btn.addEventListener('mouseleave', (e) => {
                e.preventDefault();
                this.mobileControls[action] = false;
                btn.classList.remove('pressed');
            });
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            btn.addEventListener('selectstart', (e) => e.preventDefault());
            btn.addEventListener('dragstart', (e) => e.preventDefault());
        };
        
        setupMobileControl('leftBtn', 'left');
        setupMobileControl('rightBtn', 'right');
        setupMobileControl('jumpBtn', 'jump');
        setupMobileControl('attackBtn', 'attack');
        
        // –ö–Ω–æ–ø–∫–∏ —ç–∫—Ä–∞–Ω–æ–≤
        document.getElementById('startGameBtn').addEventListener('click', () => {
            console.log("Start Game button clicked!");
            this.startGame();
        });
        document.getElementById('restartBtn').addEventListener('click', () => {
            console.log("Restart button clicked!");
            this.restartGame();
        });
        document.getElementById('playAgainBtn').addEventListener('click', () => {
            console.log("Play Again button clicked!");
            this.restartGame();
        });
    }
    
    startGame() {
        console.log("StartGame method called, current gameState:", this.gameState);
        if (this.gameState === 'playing') {
            console.log("Game already playing, returning");
            return;
        }
        console.log("Starting game...");
        this.gameState = 'playing';
        console.log("Set gameState to:", this.gameState);
        
        const welcomeScreen = document.getElementById('welcomeScreen');
        const gameOverScreen = document.getElementById('gameOverScreen');
        const victoryScreen = document.getElementById('victoryScreen');
        
        console.log("Hiding screens...");
        welcomeScreen.classList.add('hidden');
        gameOverScreen.classList.add('hidden');
        victoryScreen.classList.add('hidden');
        
        console.log("Welcome screen classes:", welcomeScreen.classList.toString());
        console.log("Calling setupLevel...");
        this.setupLevel();
        console.log("Game started successfully!");
    }
    
    restartGame() {
        this.gameState = 'playing';
        this.currentLevel = 1;
        this.score = 0;
        this.health = 3;
        this.player = new Player(100, 300);
        document.getElementById('gameOverScreen').classList.add('hidden');
        document.getElementById('victoryScreen').classList.add('hidden');
        this.setupLevel();
        this.updateUI();
    }
    
    setupLevel() {
        this.platforms = [];
        this.projectiles = [];
        this.particles = [];
        this.collectibles = [];
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.createPlatforms();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Å—Å–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const bossInfo = this.bossData[this.currentLevel];
        this.boss = new Boss(this.canvas.width - 100, this.canvas.height - 150, bossInfo);
        
        // –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        this.player.x = 50;
        this.player.y = this.canvas.height - 150;
        this.player.velocityX = 0;
        this.player.velocityY = 0;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–∏–±–ª–æ–≤
        this.createCollectibles();
    }
    
    createPlatforms() {
        const w = this.canvas.width;
        const h = this.canvas.height;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        this.platforms.push(new Platform(0, h - 50, w, 50));
        
        // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä—ã–∂–∫–æ–≤
        this.platforms.push(new Platform(200, h - 150, 150, 20));
        this.platforms.push(new Platform(400, h - 250, 150, 20));
        this.platforms.push(new Platform(w - 200, h - 200, 150, 20));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        switch(this.currentLevel) {
            case 2:
                this.platforms.push(new Platform(100, h - 350, 100, 20));
                break;
            case 3:
                this.platforms.push(new Platform(150, h - 180, 100, 20));
                this.platforms.push(new Platform(350, h - 320, 100, 20));
                break;
            case 4:
                this.platforms.push(new Platform(50, h - 280, 80, 20));
                this.platforms.push(new Platform(300, h - 180, 80, 20));
                break;
        }
    }
    
    createCollectibles() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–±–ª—ã (—É–≥–æ–ª—å–∫–∏ –∏ –ª–∞–≤–∞—à)
        for(let i = 0; i < 3; i++) {
            const x = 150 + i * 200;
            const y = this.canvas.height - 100;
            this.collectibles.push(new Collectible(x, y, Math.random() > 0.5 ? 'üî•' : 'ü•ô'));
        }
    }
    
    gameLoop() {
        this.update();
        this.render();
        requestAnimationFrame(() => this.gameLoop());
    }
    
    update() {
        if (this.gameState !== 'playing') return;
        
        this.handleInput();
        this.player.update(this.platforms);
        
        if (this.boss) {
            this.boss.update(this.player);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–æ–≤ –±–æ—Å—Å–æ–º - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Ä–µ–∂–µ —Å–æ–∑–¥–∞–µ–º —Å–Ω–∞—Ä—è–¥—ã
            if (Math.random() < 0.01 && this.projectiles.length < 3) {
                this.projectiles.push(new Projectile(
                    this.boss.x, 
                    this.boss.y + 20, 
                    this.bossData[this.currentLevel].weapon
                ));
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–æ–≤
        this.projectiles.forEach((projectile, index) => {
            projectile.update();
            if (projectile.x < 0 || projectile.x > this.canvas.width) {
                this.projectiles.splice(index, 1);
            }
            
            // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º
            if (this.checkCollision(this.player, projectile)) {
                this.takeDamage();
                this.projectiles.splice(index, 1);
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–∏–±–ª–æ–≤
        this.collectibles.forEach((collectible, index) => {
            if (this.checkCollision(this.player, collectible)) {
                this.score += 10;
                this.collectibles.splice(index, 1);
                this.createParticle(collectible.x, collectible.y, '‚ú®');
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
        this.particles.forEach((particle, index) => {
            particle.update();
            if (particle.life <= 0) {
                this.particles.splice(index, 1);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–¥–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        if (this.player.y > this.canvas.height) {
            this.takeDamage();
        }
        
        this.updateUI();
    }
    
    handleInput() {
        const leftPressed = this.keys['ArrowLeft'] || this.keys['a'] || this.mobileControls.left;
        const rightPressed = this.keys['ArrowRight'] || this.keys['d'] || this.mobileControls.right;
        const jumpPressed = this.keys['ArrowUp'] || this.keys['w'] || this.keys[' '] || this.mobileControls.jump;
        const attackPressed = this.keys['x'] || this.keys['z'] || this.mobileControls.attack;
        
        if (leftPressed) {
            this.player.moveLeft();
        }
        if (rightPressed) {
            this.player.moveRight();
        }
        if (jumpPressed) {
            this.player.jump();
        }
        if (attackPressed && !this.player.attacking) {
            this.player.attack();
            this.checkBossAttack();
        }
    }
    
    checkBossAttack() {
        if (!this.boss) return;
        
        const distance = Math.abs(this.player.x - this.boss.x);
        if (distance < 80) {
            this.boss.takeDamage();
            this.createParticle(this.boss.x, this.boss.y, 'üçñ');
            this.score += 50;
            
            if (this.boss.health <= 0) {
                this.nextLevel();
            }
        }
    }
    
    takeDamage() {
        this.health--;
        this.createParticle(this.player.x, this.player.y, 'üí•');
        
        if (this.health <= 0) {
            this.gameState = 'gameOver';
            document.getElementById('gameOverScreen').classList.remove('hidden');
        } else {
            // –†–µ—Å–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            this.player.x = 50;
            this.player.y = this.canvas.height - 150;
            this.player.velocityX = 0;
            this.player.velocityY = 0;
        }
    }
    
    nextLevel() {
        this.currentLevel++;
        this.createParticle(this.boss.x, this.boss.y, 'üéâ');
        
        if (this.currentLevel > this.maxLevel) {
            this.gameState = 'victory';
            document.getElementById('finalScore').textContent = this.score;
            document.getElementById('victoryScreen').classList.remove('hidden');
        } else {
            setTimeout(() => {
                this.setupLevel();
            }, 1000);
        }
    }
    
    createParticle(x, y, emoji) {
        // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
        if (this.particles.length < 10) {
            this.particles.push(new Particle(x, y, emoji));
        }
    }
    
    checkCollision(obj1, obj2) {
        return obj1.x < obj2.x + obj2.width &&
               obj1.x + obj1.width > obj2.x &&
               obj1.y < obj2.y + obj2.height &&
               obj1.y + obj1.height > obj2.y;
    }
    
    updateUI() {
        if (this.health !== this.lastUIUpdate.health ||
            this.score !== this.lastUIUpdate.score ||
            this.currentLevel !== this.lastUIUpdate.level) {
            document.getElementById('lives').textContent = this.health;
            document.getElementById('score').textContent = this.score;
            document.getElementById('level').textContent = this.currentLevel;
            this.lastUIUpdate = { health: this.health, score: this.score, level: this.currentLevel };
        }
    }
    
    render() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –§–æ–Ω —É—Ä–æ–≤–Ω—è
        this.renderBackground();
        
        if (this.gameState === 'playing') {
            // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
            this.platforms.forEach(platform => platform.render(this.ctx));
            
            // –ö–æ–ª–ª–µ–∫—Ç–∏–±–ª—ã
            this.collectibles.forEach(collectible => collectible.render(this.ctx));
            
            // –ò–≥—Ä–æ–∫
            this.player.render(this.ctx);
            
            // –ë–æ—Å—Å
            if (this.boss) {
                this.boss.render(this.ctx);
            }
            
            // –°–Ω–∞—Ä—è–¥—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            this.projectiles.forEach(projectile => {
                if (projectile.x > -50 && projectile.x < this.canvas.width + 50) {
                    projectile.render(this.ctx);
                }
            });
            
            // –ß–∞—Å—Ç–∏—Ü—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            this.particles.forEach(particle => {
                if (particle.life > 0) {
                    particle.render(this.ctx);
                }
            });
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Å—Å–µ
            if (this.boss && this.boss.health > 0) {
                this.renderBossInfo();
            }
        }
    }
    
    renderBackground() {
        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        gradient.addColorStop(0, '#87CEEB');
        gradient.addColorStop(1, '#98FB98');
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –û–±–ª–∞–∫–∞
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        this.ctx.font = '30px Arial';
        this.ctx.fillText('‚òÅÔ∏è', 100, 50);
        this.ctx.fillText('‚òÅÔ∏è', 300, 80);
        this.ctx.fillText('‚òÅÔ∏è', 500, 40);
    }
    
    renderBossInfo() {
        const bossInfo = this.bossData[this.currentLevel];
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        this.ctx.fillRect(10, 10, 250, 60);
        
        this.ctx.fillStyle = 'white';
        this.ctx.font = '16px Arial';
        this.ctx.fillText(`–ë–æ—Å—Å: ${bossInfo.emoji} ${bossInfo.name}`, 20, 30);
        this.ctx.fillText(`–ó–¥–æ—Ä–æ–≤—å–µ: ${'‚ù§Ô∏è'.repeat(this.boss.health)}`, 20, 50);
    }
    
    updatePlatformSizes() {
        if (this.currentLevel && this.bossData[this.currentLevel]) {
            this.platforms.forEach(platform => {
                platform.width = Math.min(platform.width, GAME_WIDTH * 0.3);
            });
        }
    }
}

// –ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ (–≠—Ä–∏–∫)
class Player {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.width = 40;
        this.height = 40;
        this.velocityX = 0;
        this.velocityY = 0;
        this.grounded = false;
        this.attacking = false;
        this.attackCooldown = 0;
    }
    
    moveLeft() {
        this.velocityX = Math.max(this.velocityX - 0.5, -5);
    }
    
    moveRight() {
        this.velocityX = Math.min(this.velocityX + 0.5, 5);
    }
    
    jump() {
        if (this.grounded) {
            this.velocityY = -12;
            this.grounded = false;
        }
    }
    
    attack() {
        this.attacking = true;
        this.attackCooldown = 20;
    }
    
    update(platforms) {
        // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        this.velocityY += 0.5;
        
        // –¢—Ä–µ–Ω–∏–µ
        this.velocityX *= 0.8;
        
        // –î–≤–∏–∂–µ–Ω–∏–µ
        this.x += this.velocityX;
        this.y += this.velocityY;
        
        // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        this.grounded = false;
        platforms.forEach(platform => {
            if (this.x < platform.x + platform.width &&
                this.x + this.width > platform.x &&
                this.y < platform.y + platform.height &&
                this.y + this.height > platform.y) {
                
                if (this.velocityY > 0) {
                    this.y = platform.y - this.height;
                    this.velocityY = 0;
                    this.grounded = true;
                }
            }
        });
        
        // –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        this.x = Math.max(0, Math.min(this.x, GAME_WIDTH - this.width));
        
        // –ê—Ç–∞–∫–∞
        if (this.attackCooldown > 0) {
            this.attackCooldown--;
        } else {
            this.attacking = false;
        }
    }
    
    render(ctx) {
        // –¢–µ–Ω—å
        ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
        ctx.fillRect(this.x + 5, this.y + this.height, this.width - 5, 5);
        
        // –≠—Ä–∏–∫
        ctx.fillStyle = this.attacking ? '#ff6b6b' : '#4ecdc4';
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –õ–∏—Ü–æ
        ctx.font = '30px Arial';
        ctx.fillText('üòä', this.x + 5, this.y + 25);
        
        // –ê—Ç–∞–∫–∞
        if (this.attacking) {
            ctx.font = '20px Arial';
            ctx.fillText('üçñ', this.x + this.width, this.y + 10);
        }
    }
}

// –ö–ª–∞—Å—Å –±–æ—Å—Å–∞
class Boss {
    constructor(x, y, info) {
        this.x = x;
        this.y = y;
        this.width = 50;
        this.height = 50;
        this.info = info;
        this.health = 3;
        this.moveDirection = 1;
        this.moveTimer = 0;
    }
    
    update(player) {
        // –ü—Ä–æ—Å—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –±–æ—Å—Å–∞
        this.moveTimer++;
        if (this.moveTimer > 120) {
            this.moveDirection *= -1;
            this.moveTimer = 0;
        }
        
        this.x += this.moveDirection * 1;
        this.x = Math.max(0, Math.min(this.x, GAME_WIDTH - this.width));
    }
    
    takeDamage() {
        this.health--;
    }
    
    render(ctx) {
        // –¢–µ–Ω—å
        ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
        ctx.fillRect(this.x + 5, this.y + this.height, this.width - 5, 5);
        
        // –ë–æ—Å—Å
        ctx.fillStyle = this.health <= 1 ? '#ff6b6b' : '#9b59b6';
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –õ–∏—Ü–æ –±–æ—Å—Å–∞
        ctx.font = '40px Arial';
        ctx.fillText(this.info.emoji, this.x + 5, this.y + 35);
        
        // –ò–º—è
        ctx.fillStyle = 'black';
        ctx.font = '12px Arial';
        ctx.fillText(this.info.name, this.x, this.y - 5);
    }
}

// –ö–ª–∞—Å—Å —Å–Ω–∞—Ä—è–¥–∞
class Projectile {
    constructor(x, y, emoji) {
        this.x = x;
        this.y = y;
        this.width = 20;
        this.height = 20;
        this.velocityX = -3;
        this.emoji = emoji;
    }
    
    update() {
        this.x += this.velocityX;
    }
    
    render(ctx) {
        ctx.font = '20px Arial';
        ctx.fillText(this.emoji, this.x, this.y);
    }
}

// –ö–ª–∞—Å—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
class Platform {
    constructor(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    
    render(ctx) {
        ctx.fillStyle = '#8B4513';
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –¢—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É
        ctx.fillStyle = '#228B22';
        ctx.fillRect(this.x, this.y - 5, this.width, 5);
    }
}

// –ö–ª–∞—Å—Å –∫–æ–ª–ª–µ–∫—Ç–∏–±–ª–∞
class Collectible {
    constructor(x, y, emoji) {
        this.x = x;
        this.y = y;
        this.width = 20;
        this.height = 20;
        this.emoji = emoji;
        this.bounce = 0;
    }
    
    render(ctx) {
        this.bounce += 0.1;
        const offsetY = Math.sin(this.bounce) * 5;
        
        ctx.font = '20px Arial';
        ctx.fillText(this.emoji, this.x, this.y + offsetY);
    }
}

// –ö–ª–∞—Å—Å —á–∞—Å—Ç–∏—Ü—ã
class Particle {
    constructor(x, y, emoji) {
        this.x = x;
        this.y = y;
        this.velocityX = (Math.random() - 0.5) * 4;
        this.velocityY = (Math.random() - 0.5) * 4;
        this.emoji = emoji;
        this.life = 60;
        this.maxLife = 60;
    }
    
    update() {
        this.x += this.velocityX;
        this.y += this.velocityY;
        this.life--;
    }
    
    render(ctx) {
        ctx.globalAlpha = this.life / this.maxLife;
        ctx.font = '16px Arial';
        ctx.fillText(this.emoji, this.x, this.y);
        ctx.globalAlpha = 1;
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
window.addEventListener('load', () => {
    new Game();
}); 