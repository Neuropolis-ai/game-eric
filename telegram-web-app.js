// Telegram Web App Integration
class TelegramWebApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.init();
    }
    
    init() {
        if (!this.tg) {
            console.log('Telegram Web App API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        this.tg.ready();
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        this.tg.expand();
        
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞–π–ø–æ–º
        this.tg.disableClosingConfirmation();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        this.setupTheme();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        this.setupButtons();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
        this.sendGameStart();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
    }
    
    setupTheme() {
        if (!this.tg) return;
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        this.tg.setHeaderColor('#ff6b6b');
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        this.tg.setBackgroundColor('#87CEEB');
        
        // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ç–µ–º–µ Telegram
        const themeParams = this.tg.themeParams;
        if (themeParams) {
            document.documentElement.style.setProperty('--tg-bg-color', themeParams.bg_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-text-color', themeParams.text_color || '#000000');
            document.documentElement.style.setProperty('--tg-button-color', themeParams.button_color || '#007acc');
        }
    }
    
    setupButtons() {
        if (!this.tg) return;
        
        // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ)
        this.tg.MainButton.text = '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º';
        this.tg.MainButton.color = '#ff6b6b';
        this.tg.MainButton.textColor = '#ffffff';
        this.tg.MainButton.hide();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.tg.MainButton.onClick(() => {
            this.shareScore();
        });
    }
    
    setupEventHandlers() {
        if (!this.tg) return;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.tg.onEvent('viewportChanged', () => {
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ —Ä–∞–∑–º–µ—Ä
            window.dispatchEvent(new Event('resize'));
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.tg.onEvent('settingsButtonClicked', () => {
            this.showSettings();
        });
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    sendGameStart() {
        if (!this.tg) return;
        
        const startData = {
            action: 'game_start',
            timestamp: Date.now(),
            user_id: this.tg.initDataUnsafe?.user?.id,
            username: this.tg.initDataUnsafe?.user?.username
        };
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç
        this.tg.sendData(JSON.stringify(startData));
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
    sendGameResult(level, score, isVictory) {
        if (!this.tg) return;
        
        const resultData = {
            action: 'game_result',
            level: level,
            score: score,
            victory: isVictory,
            timestamp: Date.now(),
            user_id: this.tg.initDataUnsafe?.user?.id,
            username: this.tg.initDataUnsafe?.user?.username
        };
        
        this.tg.sendData(JSON.stringify(resultData));
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø–æ–±–µ–¥–µ
        if (isVictory) {
            this.tg.MainButton.show();
        }
    }
    
    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    shareScore() {
        if (!this.tg) return;
        
        const shareText = `üî• –Ø –ø–æ–º–æ–≥ –≠—Ä–∏–∫—É —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –Ω–∞ —à–∞—à–ª—ã–∫–∏! üçñ\n` +
                         `–ü—Ä–æ—à—ë–ª –≤—Å–µ 4 —É—Ä–æ–≤–Ω—è –≤ –∏–≥—Ä–µ "–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫"!\n` +
                         `üö¨ –í–ª–∞–¥–∞, üç∫ –ú–∞–∫—Å–∞, üíª –ú–∞—Ä–∫–∞ –∏ ü™ñ –î–µ–Ω–∞ - –≤—Å–µ—Ö —É–≥–æ–≤–æ—Ä–∏–ª!\n\n` +
                         `–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ —à–∞—à–ª—ã—á–æ–∫! üéÆ`;
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        this.tg.sendData(JSON.stringify({
            action: 'share_result',
            text: shareText
        }));
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ)
    showSettings() {
        const settingsText = `üéÆ –ò–≥—Ä–∞ "–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫"\n\n` +
                           `üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:\n` +
                           `‚¨ÖÔ∏è‚û°Ô∏è - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ\n` +
                           `‚¨ÜÔ∏è - –ü—Ä—ã–∂–æ–∫\n` +
                           `üçñ - –ê—Ç–∞–∫–∞ —à–∞—à–ª—ã–∫–æ–º\n\n` +
                           `üéØ –¶–µ–ª—å: –ü—Ä–æ–π—Ç–∏ 4 —É—Ä–æ–≤–Ω—è –∏ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –Ω–∞ —à–∞—à–ª—ã–∫–∏!\n\n` +
                           `üö¨ –í–ª–∞–¥ - –ö—É—Ä–∏—Ç –ø–ª—é—à–∫–∏\n` +
                           `üç∫ –ú–∞–∫—Å - –ü—å—ë—Ç –ø–∏–≤–æ\n` +
                           `üíª –ú–∞—Ä–∫ - –†–∞–±–æ—Ç–∞–µ—Ç\n` +
                           `ü™ñ –î–µ–Ω - –°–ª—É–∂–∏—Ç –≤ –∞—Ä–º–∏–∏`;
        
        this.tg.showAlert(settingsText);
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö
    hapticFeedback(type = 'impact') {
        if (!this.tg?.HapticFeedback) return;
        
        switch(type) {
            case 'light':
                this.tg.HapticFeedback.impactOccurred('light');
                break;
            case 'medium':
                this.tg.HapticFeedback.impactOccurred('medium');
                break;
            case 'heavy':
                this.tg.HapticFeedback.impactOccurred('heavy');
                break;
            case 'success':
                this.tg.HapticFeedback.notificationOccurred('success');
                break;
            case 'error':
                this.tg.HapticFeedback.notificationOccurred('error');
                break;
            case 'warning':
                this.tg.HapticFeedback.notificationOccurred('warning');
                break;
            default:
                this.tg.HapticFeedback.impactOccurred('medium');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    isAvailable() {
        return !!this.tg;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getUserInfo() {
        if (!this.tg?.initDataUnsafe?.user) return null;
        
        return {
            id: this.tg.initDataUnsafe.user.id,
            username: this.tg.initDataUnsafe.user.username,
            first_name: this.tg.initDataUnsafe.user.first_name,
            last_name: this.tg.initDataUnsafe.user.last_name,
            language_code: this.tg.initDataUnsafe.user.language_code
        };
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    close() {
        if (!this.tg) return;
        this.tg.close();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
window.telegramApp = new TelegramWebApp();

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–π
if (window.telegramApp.isAvailable()) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('DOMContentLoaded', () => {
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∏–≥—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram
        const originalGameClass = window.Game;
        if (originalGameClass) {
            const originalTakeDamage = originalGameClass.prototype.takeDamage;
            const originalNextLevel = originalGameClass.prototype.nextLevel;
            const originalStartGame = originalGameClass.prototype.startGame;
            
            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
            originalGameClass.prototype.takeDamage = function() {
                window.telegramApp.hapticFeedback('error');
                return originalTakeDamage.call(this);
            };
            
            // –í–∏–±—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            originalGameClass.prototype.nextLevel = function() {
                window.telegramApp.hapticFeedback('success');
                
                if (this.currentLevel >= this.maxLevel) {
                    // –ü–æ–±–µ–¥–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    window.telegramApp.sendGameResult(this.currentLevel, this.score, true);
                }
                
                return originalNextLevel.call(this);
            };
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            originalGameClass.prototype.startGame = function() {
                window.telegramApp.hapticFeedback('light');
                return originalStartGame.call(this);
            };
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramWebApp;
} 