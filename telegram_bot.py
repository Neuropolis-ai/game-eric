#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–≥—Ä—ã "–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫"
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    WebAppInfo,
    MenuButtonWebApp,
    Message,
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web, ClientSession
import sqlite3
import hashlib
import hmac

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7635542013:AAF3pKAC1Icnaf46_qIRlNlF6I48Rojlmf8"  # –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
WEBHOOK_HOST = "https://your-domain.com"  # –í–∞—à –¥–æ–º–µ–Ω (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
GAME_URL = "https://neuropolis-ai.github.io/game-eric/"  # GitHub Pages URL (HTTPS –¥–ª—è Telegram Web App)
WEBAPP_PORT = 8443

# –§–ª–∞–≥ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
LOCAL_MODE = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å webhook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('shashlik_game.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS game_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            level INTEGER,
            score INTEGER,
            victory BOOLEAN,
            play_time INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS leaderboard (
            user_id INTEGER PRIMARY KEY,
            best_score INTEGER,
            victories INTEGER,
            total_games INTEGER,
            last_victory TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

class GameBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.dp.message(CommandStart())
        async def start_handler(message: Message):
            await self.handle_start(message)
            
        @self.dp.message(Command("play"))
        async def play_handler(message: Message):
            await self.handle_play(message)
            
        @self.dp.message(Command("stats"))
        async def stats_handler(message: Message):
            await self.handle_stats(message)
            
        @self.dp.message(Command("leaderboard"))
        async def leaderboard_handler(message: Message):
            await self.handle_leaderboard(message)
            
        @self.dp.message(Command("help"))
        async def help_handler(message: Message):
            await self.handle_help(message)
            
        @self.dp.callback_query()
        async def callback_handler(callback: CallbackQuery):
            await self.handle_callback(callback)
    
    async def handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        self.register_user(user)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üî• –ò–≥—Ä–∞—Ç—å –≤ \"–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫\" üî•",
            web_app=WebAppInfo(url=GAME_URL)
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="stats"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
            callback_data="leaderboard"
        ))
        keyboard.adjust(1)
        
        welcome_text = f"""
üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫"! üî•

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

üéÆ **–°—é–∂–µ—Ç –∏–≥—Ä—ã:**
–≠—Ä–∏–∫ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç —Å–æ–±—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π –Ω–∞ —à–∞—à–ª—ã–∫–∏, –Ω–æ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –∑–∞–Ω—è—Ç:
üö¨ –í–ª–∞–¥ –∫—É—Ä–∏—Ç –ø–ª—é—à–∫–∏
üç∫ –ú–∞–∫—Å –ø—å—ë—Ç –ø–∏–≤–æ  
üíª –ú–∞—Ä–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
ü™ñ –î–µ–Ω —Å–ª—É–∂–∏—Ç –≤ –∞—Ä–º–∏–∏

**–¢–≤–æ—è –∑–∞–¥–∞—á–∞:** –ü—Ä–æ–π—Ç–∏ 4 —É—Ä–æ–≤–Ω—è –∏ –ø–µ—Ä–µ—É–±–µ–¥–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π!

üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚¨ÖÔ∏è‚û°Ô∏è - –î–≤–∏–∂–µ–Ω–∏–µ
‚¨ÜÔ∏è - –ü—Ä—ã–∂–æ–∫
üçñ - –ê—Ç–∞–∫–∞ —à–∞—à–ª—ã–∫–æ–º

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üëá
"""
        
        await message.answer(
            welcome_text,
            reply_markup=keyboard.as_markup()
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        await self.bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=MenuButtonWebApp(
                text="üî• –ò–≥—Ä–∞—Ç—å",
                web_app=WebAppInfo(url=GAME_URL)
            )
        )
    
    async def handle_play(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
            web_app=WebAppInfo(url=GAME_URL)
        ))
        
        await message.answer(
            "üî• –ì–æ—Ç–æ–≤ —Å–æ–±–∏—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π –Ω–∞ —à–∞—à–ª—ã–∫–∏? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É! üî•",
            reply_markup=keyboard.as_markup()
        )
    
    async def handle_stats(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = message.from_user.id
        stats = self.get_user_stats(user_id)
        
        if not stats['total_games']:
            await message.answer(
                "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
                "–°—ã–≥—Ä–∞–π –ø–µ—Ä–≤—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! üéÆ"
            )
            return
        
        stats_text = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}
üèÜ –ü–æ–±–µ–¥: {stats['victories']}
üíØ –õ—É—á—à–∏–π —Å—á—ë—Ç: {stats['best_score']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {stats['win_rate']:.1f}%

üö¨ –í–ª–∞–¥–∞ —É–≥–æ–≤–æ—Ä–∏–ª: {stats['vlad_defeats']} —Ä–∞–∑
üç∫ –ú–∞–∫—Å–∞ —É–≥–æ–≤–æ—Ä–∏–ª: {stats['max_defeats']} —Ä–∞–∑  
üíª –ú–∞—Ä–∫–∞ —É–≥–æ–≤–æ—Ä–∏–ª: {stats['mark_defeats']} —Ä–∞–∑
ü™ñ –î–µ–Ω–∞ —É–≥–æ–≤–æ—Ä–∏–ª: {stats['den_defeats']} —Ä–∞–∑

üî• –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {stats['last_victory']}
"""
        
        await message.answer(stats_text)
    
    async def handle_leaderboard(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
        leaderboard = self.get_leaderboard()
        
        if not leaderboard:
            await message.answer(
                "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n"
                "–°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º! üöÄ"
            )
            return
        
        leaderboard_text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:**\n\n"
        
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, player in enumerate(leaderboard[:10]):
            medal = medals[i] if i < 3 else f"{i+1}."
            name = player['first_name'] or player['username'] or "–ê–Ω–æ–Ω–∏–º"
            leaderboard_text += f"{medal} {name} - {player['best_score']} –æ—á–∫–æ–≤\n"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–∞—Ç—å –∏ –ø–æ–±–∏—Ç—å —Ä–µ–∫–æ—Ä–¥!",
            web_app=WebAppInfo(url=GAME_URL)
        ))
        
        await message.answer(
            leaderboard_text,
            reply_markup=keyboard.as_markup()
        )
    
    async def handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üéÆ **–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ "–≠—Ä–∏–∫ –∑–æ–≤—ë—Ç –Ω–∞ —à–∞—à–ª—ã–∫"**

**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/play - –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /play
2. –£–ø—Ä–∞–≤–ª—è–π –≠—Ä–∏–∫–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
3. –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏ –∏–∑–±–µ–≥–∞–π —Å–Ω–∞—Ä—è–¥–æ–≤ –±–æ—Å—Å–æ–≤
4. –ü–æ–¥–æ–π–¥–∏ –∫ –±–æ—Å—Å—É –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∞—Ç–∞–∫–∏ (üçñ)
5. –ü—Ä–æ–π–¥–∏ –≤—Å–µ 4 —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π

**–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:**
üö¨ –í–ª–∞–¥ - –ö—É—Ä–∏—Ç –ø–ª—é—à–∫–∏ (–±—Ä–æ—Å–∞–µ—Ç –¥—ã–º üí®)
üç∫ –ú–∞–∫—Å - –ü—å—ë—Ç –ø–∏–≤–æ (–±—Ä–æ—Å–∞–µ—Ç –±—É—Ç—ã–ª–∫–∏ üçª)
üíª –ú–∞—Ä–∫ - –†–∞–±–æ—Ç–∞–µ—Ç (–±—Ä–æ—Å–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã üìã)
ü™ñ –î–µ–Ω - –°–ª—É–∂–∏—Ç –≤ –∞—Ä–º–∏–∏ (–±—Ä–æ—Å–∞–µ—Ç –∑–Ω–∞–∫–∏ –æ—Ç–ª–∏—á–∏—è üéñÔ∏è)

**–¶–µ–ª—å:** –£–≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –ø–æ–π—Ç–∏ –Ω–∞ —à–∞—à–ª—ã–∫–∏! üî•

–£–¥–∞—á–∏! üçñ
"""
        
        await message.answer(help_text)
    
    async def handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if callback.data == "stats":
            await self.handle_stats(callback.message)
        elif callback.data == "leaderboard":
            await self.handle_leaderboard(callback.message)
        
        await callback.answer()
    
    def register_user(self, user: types.User):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('shashlik_game.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, last_active)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            datetime.now()
        ))
        
        conn.commit()
        conn.close()
    
    def save_game_result(self, user_id: int, level: int, score: int, victory: bool):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã"""
        conn = sqlite3.connect('shashlik_game.db')
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        cursor.execute('''
            INSERT INTO game_results (user_id, level, score, victory, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, level, score, victory, datetime.now()))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        cursor.execute('''
            INSERT OR REPLACE INTO leaderboard 
            (user_id, best_score, victories, total_games, last_victory)
            VALUES (
                ?,
                COALESCE(MAX(?, (SELECT best_score FROM leaderboard WHERE user_id = ?)), ?),
                COALESCE((SELECT victories FROM leaderboard WHERE user_id = ?) + ?, ?),
                COALESCE((SELECT total_games FROM leaderboard WHERE user_id = ?) + 1, 1),
                CASE WHEN ? THEN ? ELSE COALESCE((SELECT last_victory FROM leaderboard WHERE user_id = ?), NULL) END
            )
        ''', (
            user_id, score, user_id, score,
            user_id, 1 if victory else 0, 1 if victory else 0,
            user_id,
            victory, datetime.now() if victory else None, user_id
        ))
        
        conn.commit()
        conn.close()
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('shashlik_game.db')
        cursor = conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('''
            SELECT 
                COALESCE(best_score, 0) as best_score,
                COALESCE(victories, 0) as victories,
                COALESCE(total_games, 0) as total_games,
                last_victory
            FROM leaderboard WHERE user_id = ?
        ''', (user_id,))
        
        result = cursor.fetchone()
        
        if not result or result[2] == 0:
            conn.close()
            return {
                'best_score': 0, 'victories': 0, 'total_games': 0,
                'win_rate': 0, 'vlad_defeats': 0, 'max_defeats': 0,
                'mark_defeats': 0, 'den_defeats': 0, 'last_victory': '–ù–∏–∫–æ–≥–¥–∞'
            }
        
        best_score, victories, total_games, last_victory = result
        win_rate = (victories / total_games * 100) if total_games > 0 else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_stats = {}
        for level in range(1, 5):
            cursor.execute('''
                SELECT COUNT(*) FROM game_results 
                WHERE user_id = ? AND level >= ? AND victory = 1
            ''', (user_id, level))
            level_stats[level] = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'best_score': best_score,
            'victories': victories,
            'total_games': total_games,
            'win_rate': win_rate,
            'vlad_defeats': level_stats[1],
            'max_defeats': level_stats[2], 
            'mark_defeats': level_stats[3],
            'den_defeats': level_stats[4],
            'last_victory': last_victory or '–ù–∏–∫–æ–≥–¥–∞'
        }
    
    def get_leaderboard(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        conn = sqlite3.connect('shashlik_game.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT l.best_score, u.first_name, u.username, l.victories
            FROM leaderboard l
            JOIN users u ON l.user_id = u.user_id
            ORDER BY l.best_score DESC, l.victories DESC
            LIMIT 10
        ''')
        
        results = cursor.fetchall()
        conn.close()
        
        return [
            {
                'best_score': row[0],
                'first_name': row[1],
                'username': row[2],
                'victories': row[3]
            }
            for row in results
        ]

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∏–≥—Ä—ã
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    bot = request.app["bot"]
    data = await request.json()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    await bot.dp.feed_webhook_update(bot, types.Update(**data))
    
    return web.Response()

async def game_data_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∏–≥—Ä—ã"""
    bot_instance = request.app["bot_instance"]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram Web App
        data = await request.json()
        init_data = data.get('init_data', '')
        
        if not verify_telegram_data(init_data):
            return web.json_response({'error': 'Invalid data'}, status=400)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        game_data = data.get('game_data', {})
        action = game_data.get('action')
        
        if action == 'game_result':
            user_id = game_data['user_id']
            level = game_data['level']
            score = game_data['score']
            victory = game_data['victory']
            
            bot_instance.save_game_result(user_id, level, score, victory)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ
            if victory:
                await send_victory_message(bot_instance.bot, user_id, score)
        
        elif action == 'share_result':
            text = game_data.get('text', '')
            user_id = game_data['user_id']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üéÆ –ò–≥—Ä–∞—Ç—å —Ç–æ–∂–µ!",
                web_app=WebAppInfo(url=GAME_URL)
            ))
            
            await bot_instance.bot.send_message(
                user_id,
                f"{text}\n\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã! üëá",
                reply_markup=keyboard.as_markup()
            )
        
        return web.json_response({'status': 'ok'})
        
    except Exception as e:
        logger.error(f"Error processing game data: {e}")
        return web.json_response({'error': 'Internal error'}, status=500)

def verify_telegram_data(init_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Web App"""
    try:
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        return bool(init_data)
    except:
        return False

async def send_victory_message(bot: Bot, user_id: int, score: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ"""
    victory_text = f"""
üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!** üéâ

üî• –¢—ã –ø–æ–º–æ–≥ –≠—Ä–∏–∫—É —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –Ω–∞ —à–∞—à–ª—ã–∫–∏!
üíØ –¢–≤–æ–π —Å—á—ë—Ç: {score} –æ—á–∫–æ–≤

–í—Å–µ –¥—Ä—É–∑—å—è —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã –∫ —à–∞—à–ª—ã—á–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ:
üö¨ –í–ª–∞–¥ –æ—Å—Ç–∞–≤–∏–ª –ø–ª—é—à–∫–∏
üç∫ –ú–∞–∫—Å –æ—Ç–ª–æ–∂–∏–ª –ø–∏–≤–æ
üíª –ú–∞—Ä–∫ –∑–∞–∫—Ä—ã–ª –Ω–æ—É—Ç–±—É–∫  
ü™ñ –î–µ–Ω –ø–æ–ª—É—á–∏–ª —É–≤–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω—É—é

üçñ –®–∞—à–ª—ã–∫ —É–¥–∞–ª—Å—è! –í—Å–µ –≤ —Å–±–æ—Ä–µ! üî•
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="üéÆ –ò–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑",
        web_app=WebAppInfo(url=GAME_URL)
    ))
    keyboard.add(InlineKeyboardButton(
        text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
        callback_data="leaderboard"
    ))
    keyboard.adjust(1)
    
    try:
        await bot.send_message(
            user_id,
            victory_text,
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logger.error(f"Error sending victory message: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot_instance = GameBot(BOT_TOKEN)
    bot = bot_instance.bot
    
    if LOCAL_MODE:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å polling (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (polling)")
        
        # –£–¥–∞–ª—è–µ–º webhook –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫ polling
        try:
            await bot_instance.dp.start_polling(bot)
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            await bot.session.close()
    else:
        # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º —Å webhook
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ (webhook)")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        await bot.set_webhook(WEBHOOK_URL)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = web.Application()
        app["bot"] = bot
        app["bot_instance"] = bot_instance
        
        # –ú–∞—Ä—à—Ä—É—Ç—ã
        app.router.add_post(WEBHOOK_PATH, webhook_handler)
        app.router.add_post("/game_data", game_data_handler)
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ –∏–≥—Ä—É –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ)
        # app.router.add_static('/', path='./game', name='game')
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', WEBAPP_PORT)
        await site.start()
        
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBAPP_PORT}")
        logger.info(f"Webhook URL: {WEBHOOK_URL}")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            await asyncio.Future()  # run forever
        except KeyboardInterrupt:
            pass
        finally:
            await runner.cleanup()
            await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 